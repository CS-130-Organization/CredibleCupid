services:
  db:
    container_name: db
    image: mysql:8.0.32
    restart: always
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - sqldb:/var/lib/mysql
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=${DATABASE_PASSWORD} --execute \"SHOW DATABASES;\""
      interval: 1s
      retries: ${HEALTHCHECK_RETRIES:-999}
      timeout: 2s
  backend:
    container_name: backend
    build:
      context: ./packages/backend
      dockerfile: Dockerfile.local
      args:
        START_CMD: ${BACKEND_START_CMD:-start:debug}
    restart: always
    env_file: .env
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - "./packages/backend/src:/usr/src/app/src"
      - "./packages/frontend/.generated:/usr/generated/"
      - backend_profile_pics_volume:/usr/uploaded/profiles
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: "curl --fail http://localhost:${BACKEND_PORT}/api-json || exit 1"
      interval: 1s
      retries: ${HEALTHCHECK_RETRIES:-999}
      timeout: 2s
  frontend:
    container_name: frontend
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile.local
    restart: always
    env_file: .env
    environment:
      - PORT=${FRONTEND_PORT}
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=${FRONTEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - "./packages/frontend/src:/usr/src/app/src"
      - "./packages/frontend/public:/usr/src/app/public"
      - "./packages/frontend/.generated:/usr/src/app/.generated"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: "curl --fail http://localhost:${FRONTEND_PORT}/ || exit 1"
      interval: 1s
      retries: ${HEALTHCHECK_RETRIES:-999}
      timeout: 2s

volumes:
  sqldb:
  backend_profile_pics_volume:

